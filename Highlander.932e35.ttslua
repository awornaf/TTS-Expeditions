function onLoad(save_state)
  local name = self.getName()
  local label = "Select \n" .. name

-- This will create a button on the object when it is loaded into the world.
  self.createButton({
    click_function = "select_Mech", -- This is a required feild
    function_owner = self, -- This is a required feild
    label = label, -- If you want the button to have Text on it.
    position = {0, 0.1, 0}, -- If you put this on the standard Cube, it will be right on top.
    rotation = {0, 0, 0}, -- if you want to rotate the button.
    scale = {1, 1, 1}, -- If you want to mess with the scale (helps with text sizes sometimes)
    width = 600,
    height = 300,
    tooltip = "Select this Mech!", -- If you want a floating tooltip when hovering over button
  })
end

function select_Mech(ojb, color)
    --Initialize necessary variables
    local PowerBag_GUID = Global.getVar('PowerBag_GUID')
    local GuileBag_GUID = Global.getVar('GuileBag_GUID')
    local actionCube_Array = Global.getTable('actionCube_Array')
    local power = getObjectFromGUID(PowerBag_GUID)
    local guile = getObjectFromGUID(GuileBag_GUID)
    --Using playerIndex to figure out which player is clicking
    local playerNum = Global.call("playerIndex", {color})
    local playerArray = Global.getTable('playerLoc_Array')
    local playerLoc = playerArray[playerNum]
    local actionCube = getObjectFromGUID(actionCube_Array[playerNum])

    --Moving the Mech mat to the associated location
    self.setPositionSmooth(playerLoc)
    --Move the associated Mech model to the mat
    local model = getObjectFromGUID('7154d7') --The Mech Model is hard coded here!
    model.setPositionSmooth({playerLoc[1], (playerLoc[2]+3), playerLoc[3]})

    --If the player is on the left or right side of the table, the mat needs to be rotated and the placement of tokens is different
    if playerNum == 1 then
      self.setRotationSmooth({0, -90, 0})

      powerLoc = {(playerLoc[1] -2.16), (playerLoc[2]+3), (playerLoc[3] +2.46)}
      power.takeObject({position = powerLoc})

      guileLoc = {(playerLoc[1] -2.17), (playerLoc[2]+3), (playerLoc[3] +1.92)}
      guile.takeObject({position = guileLoc})

      --Moving the player's Action Cube for the player in their color
      cubeLoc = {(playerLoc[1] +1.37), (playerLoc[2]+3), (playerLoc[3] -2.21)}
      actionCube.setPositionSmooth(cubeLoc)
    elseif playerNum == 5 then
      self.setRotationSmooth({0, 90, 0})

      powerLoc = {(playerLoc[1] +2.1), (playerLoc[2]+3), (playerLoc[3] -2.48)}
      power.takeObject({position = powerLoc})

      guileLoc = {(playerLoc[1] +2.11), (playerLoc[2]+3), (playerLoc[3] -1.94)}
      guile.takeObject({position = guileLoc})

      --Moving the player's Action Cube for the player in their color
      cubeLoc = {(playerLoc[1] -1.42), (playerLoc[2]+3), (playerLoc[3] +2.19)}
      actionCube.setPositionSmooth(cubeLoc)
    else
      powerLoc = {(playerLoc[1] -2.40), (playerLoc[2]+3), (playerLoc[3] -2.16)}
      power.takeObject({position = powerLoc})
      
      guileLoc = {(playerLoc[1] -1.91), (playerLoc[2]+3), (playerLoc[3] -2.18)}
      guile.takeObject({position = guileLoc})
      --Moving the player's Action Cube for the player in their color
      cubeLoc = {(playerLoc[1] +2.20), (playerLoc[2]+3), (playerLoc[3] +1.38)}
      actionCube.setPositionSmooth(cubeLoc)
    end

    self.clearButtons()
end